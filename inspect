/*
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                   Version 2, December 2004
 *
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 *********************************************************************/

#ifndef _INSPECT_H
#define _INSPECT_H

#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <limits>
#include <type_traits>
#include <typeinfo>
#include <utility>
#include <string>
#include <functional>
#include <cstring>
#include <cwctype>

#ifdef _MSC_VER
#	define noexcept
#	define constexpr const
#endif

namespace inspect
{
#	if defined(__clang__) || defined(__GNUC__) && !defined(NO_DEMANGLE)
#		include <cxxabi.h>

		template <typename Type>
		static
		std::string
		type (std::type_info const* info) noexcept
		{
			std::string result;
			int         status;
			char*       demangled = abi::__cxa_demangle(info->name(),
			                                              nullptr, nullptr, &status);

			result = demangled;
			std::free(demangled);

			if (std::is_enum<Type>::value) {
				result = "enum " + result;
			}
			else if (std::is_union<Type>::value) {
				result = "union " + result;
			}

			return result;
		}
#	elif defined(_MSC_VER) && !defined(NO_DEMANGLE)
#		include <Windows.h>
#		include <Dbghelp.h>

		template <typename Type>
		static
		std::string
		type (std::type_info const* info) noexcept
		{
			char demangled[4096];
			UnDecorateSymbolName(info->name(), demangled, 4096,
				UNDNAME_COMPLETE);

			return demangled;
		}
#	else
		template <typename Type>
		static
		std::string
		type (std::type_info const* info) noexcept
		{
				return info->name();
		}
#	endif

	template <typename Type>
	static
	std::string
	type (void) noexcept
	{
		return type<Type>(&typeid(Type));
	}

#	ifndef _MSC_VER
		template <typename Function>
		struct function_traits
			: public function_traits<decltype(&Function::operator())>
		{};

		template <typename ClassType, typename ReturnType, typename... Args>
		struct function_traits<ReturnType(ClassType::*)(Args...) const>
		{
			typedef ReturnType (*pointer)(Args...);
		};

		template <typename Function>
		static
		typename std::enable_if<std::is_function<Function>::value,
			std::tuple<std::string, std::string, std::string>>::type
		function (void)
		{
			std::string string = type<Function>();

			size_t pos = string.find("(");

			return std::make_tuple(string.substr(0, pos - 1), string.substr(pos), "");
		}

		template <typename Function>
		static
		typename std::enable_if<std::is_member_function_pointer<Function>::value,
			std::tuple<std::string, std::string, std::string>>::type
		function (void)
		{
			std::string string = type<Function>();

			std::string return_value;
			{
				size_t pos = string.find("(");

				return_value = string.substr(0, pos - 1);
			}

			std::string klass;
			{
				size_t pos  = string.find("(");
				size_t pos2 = string.find(":", pos);

				klass = string.substr(pos + 1, pos2 - pos - 1);
			}

			std::string arguments;
			{
				size_t pos = string.find(")");

				arguments = string.substr(pos + 1);
			}

			return std::make_tuple(return_value, arguments, klass);
		}

		template <typename Function>
		static
		typename std::enable_if<std::is_class<Function>::value,
			std::tuple<std::string, std::string, std::string>>::type
		function (void)
		{
			std::string string = type<typename function_traits<Function>::pointer>();
			{
				size_t pos = string.find("(*)");

				if (pos != std::string::npos) {
					string.replace(pos, 3, "");
				}
			}

			size_t pos = string.find("(");

			return std::make_tuple(string.substr(0, pos - 1), string.substr(pos), "");
		}
#	endif

	template <typename Type>
	struct is_function_object
	{
		static constexpr bool value = false;
	};

	template <typename Type>
	struct is_function_object<std::function<Type>>
	{
		static constexpr bool value = true;
	};

	template <typename Type, class Enable = void>
	struct has_call_operator;

	template <typename Type>
	struct has_call_operator<Type,
		typename std::enable_if<std::is_class<Type>::value>::type>
	{
		typedef char no[1];
		typedef char yes[2];

		template <typename T>
		static
		yes& test (decltype(&T::operator()));

		template <typename T>
		static
		no& test (...);

#		ifdef _MVC_VER
			static constexpr bool value = false;
#		else
			static constexpr bool value = sizeof(test<Type>(0)) == sizeof(yes);
#		endif
	};

	template <typename Type>
	struct has_call_operator<Type,
		typename std::enable_if<!std::is_class<Type>::value>::type>
	{
		static constexpr bool value = false;
	};

	template <typename Type>
	struct is_functor
	{
		static constexpr bool value = std::is_function<Type>::value ||
		                              std::is_member_function_pointer<Type>::value ||
		                              is_function_object<Type>::value ||
		                              has_call_operator<Type>::value;
	};

	namespace _has_cout
	{
		typedef char no[1];
		typedef char yes[2];

		struct any
		{
			template <typename T>
			any (T const&);
		};

		no& operator << (std::ostream const&, any const&);

		yes& test (std::ostream&);
		no&  test (no&);

		template <typename Type>
		struct has_cout
		{
			static std::ostream& s;
			static Type const& t;

			static constexpr bool value = sizeof(test(s << t)) == sizeof(yes);
		};
	}

	template <typename Type>
	struct has_cout : _has_cout::has_cout<Type>
	{};

	template <typename Type, class Enable = void>
	struct has_to_string_method;

	template <typename Type>
	struct has_to_string_method<Type,
		typename std::enable_if<std::is_class<Type>::value>::type>
	{
		typedef char no[1];
		typedef char yes[2];

		template <typename T, T>
		struct type_check;

		template <class T>
		struct to_string
		{
			typedef std::string (T::*function)(void);
		};

		template <class T>
		static
		yes& test (type_check<typename to_string<T>::function, &T::to_string>*);

		template <class T>
		static no& test (...);

		static constexpr bool value = sizeof(test<Type>(0)) == sizeof(yes);
	};

	template <typename Type>
	struct has_to_string_method<Type,
		typename std::enable_if<!std::is_class<Type>::value>::type>
	{
		static constexpr bool value = false;
	};

	template <typename Type, class Enable = void>
	struct has_inspect_method;

	template <typename Type>
	struct has_inspect_method<Type,
		typename std::enable_if<std::is_class<Type>::value>::type>
	{
		typedef char no[1];
		typedef char yes[2];

		template <typename T, T>
		struct type_check;

		template <class T>
		struct inspect
		{
			typedef std::string (T::*function)(void);
		};

		template <class T>
		static
		yes& test (type_check<typename inspect<T>::function, &T::inspect>*);

		template <class T>
		static no& test (...);

		static constexpr bool value = sizeof(test<Type>(0)) == sizeof(yes);
	};

	template <typename Type>
	struct has_inspect_method<Type,
		typename std::enable_if<!std::is_class<Type>::value>::type>
	{
		static constexpr bool value = false;
	};

	template <typename Type>
	struct is_string
	{
		static constexpr bool value =
			std::is_same<Type, std::string>::value ||
			std::is_same<Type, std::wstring>::value ||
			std::is_same<Type, std::u16string>::value ||
			std::is_same<Type, std::u32string>::value;
	};

	template <typename Type>
	struct is_raw_string
	{
		typedef typename std::remove_const<typename std::remove_extent<
			typename std::remove_pointer<Type>::type>::type>::type type;

		static constexpr bool value =
			((std::is_array<Type>::value &&
				std::extent<typename std::remove_extent<Type>::type>::value == 0) ||

			 (std::is_pointer<Type>::value &&
				!std::is_pointer<typename std::remove_pointer<Type>::type>::value)) &&

			(std::is_same<type, char>::value ||
			 std::is_same<type, wchar_t>::value ||
			 std::is_same<type, char16_t>::value ||
			 std::is_same<type, char32_t>::value);
	};

	template <typename Type>
	static
	typename std::enable_if<is_raw_string<Type>::value &&
		std::is_same<typename is_raw_string<Type>::type, char>::value,
			std::string>::type
	value (Type value, size_t length = -1) noexcept
	{
		std::stringstream ss(std::stringstream::out);

		if (length == (size_t) -1) {
			length = std::strlen(value);
		}

		ss << '"';
		for (size_t i = 0; i < length; i++) {
			unsigned char ch = value[i];

			if (isprint(ch)) {
				if (ch == '\\' || ch == '"') {
					ss << '\\';
				}

				ss << (char) ch;
			}
			else {
				switch (ch) {
					case '\t': ss << "\\t"; break;
					case '\n': ss << "\\n"; break;
					case '\v': ss << "\\v"; break;
					case '\f': ss << "\\f"; break;
					case '\r': ss << "\\r"; break;

					default:
						ss << "\\x" << std::setfill('0') << std::setw(2) << std::hex <<
							(unsigned) ch;
				}
			}
		}
		ss << '"';

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<is_raw_string<Type>::value &&
		std::is_same<typename is_raw_string<Type>::type, wchar_t>::value,
			std::wstring>::type
	value (Type value, size_t length = -1) noexcept
	{
		std::wstringstream ss(std::stringstream::out);

		if (length == (size_t) -1) {
			length = std::wcslen(value);
		}

		ss << '"';
		for (size_t i = 0; i < length; i++) {
			wchar_t ch = value[i];

			if (std::iswprint(ch)) {
				if (ch == '\\' || ch == '"') {
					ss << '\\';
				}

				ss << ch;
			}
			else {
				switch (ch) {
					case '\t': ss << "\\t"; break;
					case '\n': ss << "\\n"; break;
					case '\v': ss << "\\v"; break;
					case '\f': ss << "\\f"; break;
					case '\r': ss << "\\r"; break;

					default:
						ss << "\\u" << std::setfill(L'0') << std::setw(4) << std::hex << (unsigned) ch;
				}
			}
		}
		ss << '"';

		return ss.str();
	}

	// TODO: implement std::u16string inspection
	// TODO: implement std::u32string inspection

	template <typename Type>
	static
	typename std::enable_if<is_string<Type>::value, Type>::type
	value (Type& value) noexcept
	{
		return inspect::value(value.data(), value.size());
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_fundamental<Type>::value &&
		!std::is_floating_point<Type>::value, std::string>::type
	value (Type value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << std::boolalpha << value;

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_fundamental<Type>::value &&
		std::is_floating_point<Type>::value, std::string>::type
	value (Type value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << std::setprecision(std::numeric_limits<Type>::digits10) << value;

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_pointer<Type>::value &&
		!is_functor<Type>::value &&
		!is_raw_string<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "(" << type<Type>() << ") 0x" << std::hex << (intptr_t) value;

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_enum<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_enum<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " <<
			static_cast<typename std::underlying_type<Type>::type>(value) << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_union<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_union<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ":" << &value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<!has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value &&
		has_cout<Type>::value, std::string>::type
	object (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<!has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	object (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ":" << &value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value, std::string>::type
	object (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " << value.to_string() << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<has_inspect_method<Type>::value, std::string>::type
	object (Type& value) noexcept
	{
		return value.inspect();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_class<Type>::value &&
		!is_functor<Type>::value &&
		!is_string<Type>::value &&
		!has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);
		ss << "#<" << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_class<Type>::value &&
		!is_functor<Type>::value &&
		!is_string<Type>::value &&
		!has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		return object<Type>(value);
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_class<Type>::value &&
		!is_functor<Type>::value &&
		!is_string<Type>::value &&
		!has_inspect_method<Type>::value &&
		has_to_string_method<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		return object<Type>(value);
	}

	template <typename Type>
	static
	typename std::enable_if<std::is_class<Type>::value &&
		!is_functor<Type>::value &&
		!is_string<Type>::value &&
		has_inspect_method<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		return value.inspect();
	}

#	ifndef _MSC_VER
		template <typename Type>
		static
		typename std::enable_if<std::is_function<Type>::value, std::string>::type
		value (Type* value) noexcept
		{
			auto strings = function<Type>();

			std::stringstream ss(std::stringstream::out);
			ss << "#<function " << std::get<0>(strings) << std::get<1>(strings) << ": 0x" <<
				std::hex << (intptr_t) value << ">";

			return ss.str();
		}

		template <typename Type>
		static
		typename std::enable_if<std::is_member_function_pointer<Type>::value, std::string>::type
		value (Type value) noexcept
		{
			(void) value;

			auto strings = function<Type>();

			std::stringstream ss(std::stringstream::out);
			ss << "#<function " << std::get<0>(strings) << std::get<1>(strings) << ": @" <<
				std::get<2>(strings) << ">";

			return ss.str();
		}

		template <typename Type>
		static
		typename std::enable_if<std::is_class<Type>::value &&
			is_function_object<Type>::value, std::string>::type
		value (Type& value) noexcept
		{
			auto strings = function<Type>();

			std::stringstream ss(std::stringstream::out);
			ss << "#<function " << std::get<0>(strings) << std::get<1>(strings) << ": " <<
				type<void>(&value.target_type()) << ">";

			return ss.str();
		}

		template <typename Type>
		static
		typename std::enable_if<std::is_class<Type>::value &&
			!is_string<Type>::value &&
			!is_function_object<Type>::value &&
			has_call_operator<Type>::value, std::string>::type
		value (Type& value) noexcept
		{
			auto strings = function<Type>();

			std::stringstream ss(std::stringstream::out);
			ss << "#<function " << std::get<0>(strings) << std::get<1>(strings) << ": " <<
				object<Type>(value) << ">";

			return ss.str();
		}
#	endif

	template <typename Type>
	static
	typename std::enable_if<std::is_array<Type>::value &&
		!is_raw_string<Type>::value, std::string>::type
	value (Type& value) noexcept
	{
		std::stringstream ss(std::stringstream::out);

		ss << "[";
		for (size_t i = 0; i < std::extent<Type>::value; i++) {
			ss << inspect::value(value[i]);

			if (i < std::extent<Type>::value - 1) {
				ss << ", ";
			}
		}
		ss << "]";

		return ss.str();
	}
}

#endif
