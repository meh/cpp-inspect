/*
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                   Version 2, December 2004
 *
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 *********************************************************************/

#ifndef _INSPECT_H
#define _INSPECT_H

#include <iostream>
#include <sstream>
#include <type_traits>
#include <typeinfo>
#include <string>

namespace inspect
{
#	ifndef NO_DEMANGLE
#		include <cxxabi.h>

		template <typename Type>
		inline
		std::string
		type (void)
		{
			std::string result;
			int         status;
			char*       demangled = abi::__cxa_demangle(typeid(Type).name(),
																										nullptr, nullptr, &status);

			result = demangled;
			free(demangled);

			return result;
		}
#	else
		template <typename Type>
		inline
		std::string
		type (void)
		{
			return typeid(Type).name();
		}
#	endif

	template <typename Type>
	inline
	std::string
	type (Type& value)
	{
		(void) value;

		return type<Type>();
	}

	namespace _has_cout
	{
		typedef char no[1];
		typedef char yes[2];

		struct any
		{
			template <typename T>
			any (T const&);
		};

		no& operator << (std::ostream const&, any const&);

		yes& test (std::ostream&);
		no&  test (no&);

		template <typename Type>
		struct has_cout
		{
			static std::ostream& s;
			static Type const& t;
			static bool const value = sizeof(test(s << t)) == sizeof(yes);
		};
	}

	template <typename Type>
	struct has_cout : _has_cout::has_cout<Type>
	{};

	template <typename Type>
	struct has_to_string_method
	{
		typedef char no[1];
		typedef char yes[2];

		template <typename C>
		static typename std::enable_if<std::is_same<decltype(&C::to_string),
																	 std::string(C::*)(void)>::value, yes&>::type
		test (decltype(&C::to_string));

		template <typename C>
		static no& test (...);

		static const bool value = sizeof(test<Type>(0)) == sizeof(yes);
	};

	template <typename Type>
	struct has_inspect_method
	{
		typedef char no[1];
		typedef char yes[2];

		template <typename C>
		static typename std::enable_if<std::is_same<decltype(&C::inspect),
																	 std::string(C::*)(void)>::value, yes&>::type
		test (decltype(&C::inspect));

		template <typename C>
		static no& test (...);

		static const bool value = sizeof(test<Type>(0)) == sizeof(yes);
	};

	template <typename Type>
	struct is_string
	{
		static const bool value = std::is_same<Type, std::string>::value ||
		                          std::is_same<Type, std::wstring>::value ||
		                          std::is_same<Type, std::u16string>::value ||
		                          std::is_same<Type, std::u32string>::value;
	};

	template <typename Type>
	struct is_raw_string
	{
		static const bool value = (std::is_array<Type>::value &&
			std::is_same<typename std::remove_const<
				typename std::remove_extent<Type>::type>::type, char>::value) ||

			(std::is_pointer<Type>::value &&
				std::is_same<typename std::remove_const<
					typename std::remove_pointer<Type>::type>::type, char>::value);
	};

	template <typename Type>
	inline
	typename std::enable_if<is_string<Type>::value, Type>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);

		ss << "\"";
		for (auto ch : value) {
			if (ch == '\\') {
				ss << "\\";
			}

			ss << ch;
		}
		ss << "\"";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<is_raw_string<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);

		ss << "\"";
		for (char const* string = value; *string; string++) {
			if (*string == '\\') {
				ss << "\\";
			}

			ss << *string;
		}
		ss << "\"";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_fundamental<Type>::value, std::string>::type
	value (Type value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << std::boolalpha << value;

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_pointer<Type>::value &&
		!is_raw_string<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "(" << type<Type>() << ") " << value;

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_enum<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<enum " << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_enum<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<enum " << type<Type>() << ": " <<
			static_cast<typename std::underlying_type<Type>::type>(value) << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_union<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<union " << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_union<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<union " << type<Type>() << ":" << &value << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_class<Type>::value &&
		!is_string<Type>::value &&
		!has_to_string_method<Type>::value &&
		has_cout<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<" << type<Type>() << ": " << value << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_class<Type>::value &&
		!is_string<Type>::value &&
		!has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value &&
		!has_cout<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<" << type<Type>() << ":" << &value << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<has_to_string_method<Type>::value &&
		!has_inspect_method<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);
		ss << "#<" << type<Type>() << ": " << value.to_string() << ">";

		return ss.str();
	}

	template <typename Type>
	inline
	typename std::enable_if<has_inspect_method<Type>::value, std::string>::type
	value (Type& value)
	{
		return value.inspect();
	}

	template <typename Type>
	inline
	typename std::enable_if<std::is_array<Type>::value &&
		!is_raw_string<Type>::value, std::string>::type
	value (Type& value)
	{
		std::ostringstream ss(std::ostringstream::out);

		ss << "[";
		for (unsigned i = 0; i < std::extent<Type>::value; i++) {
			ss << inspect::value(value[i]);

			if (i < std::extent<Type>::value - 1) {
				ss << ", ";
			}
		}
		ss << "]";

		return ss.str();
	}
}

#endif
